= pass:[<span style='color:#006666'>Building EPICS base, QE Framework and qegui on Windows 10 x64 with Qt 5.9.9 and MSVC2013</span>]
:source-highlighter: rouge
:toc:



== pass:[<span style='color:#006666'>Environment</span>]
These instructions have been developed on Microsoft Windows 10 Enterprise x64 and Windows 10 Education x64. Should work on other versions of Windows 10, Windows 8 and Windows 7. You will have to make the appropriate adjustments if you want a 32-bit build.

== pass:[<span style='color:#006666'>Tools</span>]

=== pass:[<span style='color:#006666'>Microsoft Visual Studio Community</span>]
* Obtain the https://visualstudio.microsoft.com/vs/older-downloads/[Microsoft Visual Studio Community 2013] installer.
* I did not choose any optional features
* I chose to install to `c:\devtools\Microsoft Visual Studio 12.0` rather than `c:\Program Files\Microsoft Visual Studio 12.0`
* Check the versions and locations:
[source,Batchfile]
----
C:\Windows\System32>"C:\devtools\Microsoft Visual Studio 12.0\VC\vcvarsall.bat" amd64

C:\Windows\System32>where cl
C:\devtools\Microsoft Visual Studio 12.0\VC\bin\amd64\cl.exe

C:\Windows\System32>cl /?
Microsoft (R) C/C++ Optimizing Compiler Version 18.00.40629 for x64
Copyright (C) Microsoft Corporation.  All rights reserved.

C:\Windows\System32>where nmake
C:\devtools\Microsoft Visual Studio 12.0\VC\bin\amd64\nmake.exe

C:\Windows\System32>nmake /?
Microsoft (R) Program Maintenance Utility Version 12.00.21005.1
Copyright (C) Microsoft Corporation.  All rights reserved.

C:\Windows\System32>where rc
C:\Program Files (x86)\Windows Kits\8.1\bin\x64\rc.exe
C:\Program Files (x86)\Windows Kits\8.1\bin\x86\rc.exe

C:\Windows\System32>rc /?
Microsoft (R) Windows (R) Resource Compiler Version 6.3.9600.17336
Copyright (C) Microsoft Corporation.  All rights reserved.
----

=== pass:[<span style='color:#006666'>Strawberry Perl</span>]
* Obtain the Strawberry Perl installer
* For this walkthrough, Strawberry Perl was installed to `c:\devtools\strawberry`
* Strawberry Perl include gnu make as `gmake.exe`, so that is the version of make we will use here
* Check the versions:
[source,Batchfile]
----
C:\Windows\System32>cd c:\devtools\strawberry\

c:\devtools\strawberry\perl\bin>gmake --version
GNU Make 4.2.1

c:\devtools\strawberry\perl\bin>perl --version
This is perl 5, version 30, subversion 1 (v5.30.1) built for MSWin32-x64-multi-thread
----

=== pass:[<span style='color:#006666'>Qt 5.9.9</span>]
* Obtain the https://download.qt.io/archive/qt/5.9/5.9.9/[Qt 5.9.9 installer].
* You might find a https://mirrors.ocf.berkeley.edu/qt/archive/qt/[faster mirror] https://download.qt.io/static/mirrorlist/[here].
* For this walkthrough, Qt will be installed into `c:\devtools\Qt`
* Skip making an account
* When installing Qt 5.9.0 make sure to select the following components:
** MSVC 2013 64-bit
** Strawberry Perl 5.22.1.3 if you do not already have a Perl installation
*** To install Strawberry Perl, you will have to run the installer located at `C:\devtools\Qt\Qt5.9.9\Tools\Perl52213_32` once the Qt 5.9.9 installation is complete

image:qt5.9Install.png[]

* Check versions and locations:
[source,Batchfile]
----
C:\Windows\System32>set PATH=C:\devtools\Qt\Qt5.9.9\5.9.9\msvc2013_64\bin;%PATH%
C:\Windows\System32>set PATH=C:\devtools\Qt\Qt5.9.9\Tools\QtCreator\bin;%PATH%

C:\Windows\System32>qmake -v
QMake version 3.1
Using Qt version 5.9.9 in C:/devtools/Qt/Qt5.9.9/5.9.9/msvc2013_64/lib

C:\Windows\System32>where qmake
C:\devtools\Qt\Qt5.9.9\5.9.9\msvc2013_64\bin\qmake.exe

C:\Windows\System32>uic -v
uic 5.9.9

C:\Windows\System32>where uic
C:\devtools\Qt\Qt5.9.9\5.9.9\msvc2013_64\bin\uic.exe

C:\Windows\System32>moc -v
moc 5.9.9

C:\Windows\System32>where moc
C:\devtools\Qt\Qt5.9.9\5.9.9\msvc2013_64\bin\moc.exe

C:\Windows\System32>jom /version
jom version 1.1.3

C:\Windows\System32>where jom
C:\devtools\Qt\Qt5.9.9\Tools\QtCreator\bin\jom.exe
----

=== pass:[<span style='color:#006666'>Git for Windows</span>]
* If you do not have git installed, obtain the https://gitforwindows.org/[installer]
* I chose the following options so I can use git from the windows command prompt:

image:gitForWindowsInstall.png[]

image:gitForWindowsInstall2.png[]

* Check the version and location:
[source,Batchfile]
----
C:\Windows\System32>git --version
git version 2.24.1.windows.2

C:\Windows\System32>where git
C:\devtools\Git\cmd\git.exe
----

== pass:[<span style='color:#006666'>EPICS base</span>]
* Obtain the release of EPICS base that you would like to build from the https://github.com/epics-base/epics-base/releases[EPICS base github repository].
** For this example we will use https://github.com/epics-base/epics-base/releases/tag/R3.15.7[release 3.15.7]
** Extract the archive to c:\epics\base
* Create a batch file in `c:\devtools\Batchfiles` called `buildEpicsBase_MSVC2013x64.bat` with the following contents:
[source,Batchfile]
----
include::buildEpicsBase_MSVC2013x64.bat[]
----
* Run the batch file, and you will end up at a prompt at `c:\epics\base`.
* Build EPICS base:
[source,Batchfile]
----
c:\epics\base>gmake -j 4
----
* The ``-j 4` switch tells gmake to use 4 cores. Choose the appropriate number for your processor. Leave it out if you are unsure.
* Install EPICS base:
[source,Batchfile]
----
c:\epics\base>gmake -j 4 install
----
Do a quick test:
[source,Batchfile]
----
c:\epics\base>bin\windows-x64\softIoc.exe
epics> iocInit
Starting iocInit
############################################################################
## EPICS R3.15.7
## EPICS Base built Jan 12 2020
############################################################################
iocRun: All initialization complete
epics> exit
----

== pass:[<span style='color:#006666'>ACAI</span>]
* Get the latest version from the https://github.com/andrewstarritt/acai[github repository]:
[source,Batchfile]
----
c:\epics>git clone https://github.com/andrewstarritt/acai.git
Cloning into 'acai'...
remote: Enumerating objects: 76, done.
remote: Counting objects: 100% (76/76), done.
remote: Compressing objects: 100% (55/55), done.
remote: Total 751 (delta 45), reused 47 (delta 21), pack-reused 675
Receiving objects: 100% (751/751), 377.70 KiB | 562.00 KiB/s, done.
Resolving deltas: 100% (549/549), done.
----
* Open `c:\epics\acai\confgure\RELEASE` in a text editor and edit the `EPICS_BASE` location:
[source,Batchfile]
----
EPICS_BASE=c:\epics\base
----
* Build:
[source,Batchfile]
----
c:\epics\acai>gmake -j 4
----
** To get it to build, with MSVC2013, the following has to be added to each of:
*** `acai_client.cpp`
*** `acai_client_types.cpp`
*** `test_csnprintf.cpp`

[source,c++]
----
#if defined (_MSC_VER)
// code specific to Visual Studio compiler
#if (_MSC_VER < 1900)
#define snprintf   _snprintf
#endif
#endif
----


* Install:
[source,Batchfile]
----
c:\epics\acai>gmake -j 4 install
----

* Test:
[source,Batchfile]
----
c:\epics\acai>set PATH=C:\epics\base\bin\windows-x64;%PATH%

c:\epics\acai>bin\windows-x64\acai_monitor.exe
acai_monitor: No PV name(s) specified

c:\epics\acai>bin\windows-x64\acai_monitor.exe --version
ACAI 1.5.4 using EPICS 3.15.7
----

== pass:[<span style='color:#006666'>Qwt</span>]
* Obtain the source for the 6.1.3 release of Qwt from https://sourceforge.net/projects/qwt/files/qwt/6.1.3/[SourceForge]
* Unzip to `C:\epicsQt\qwt-6.1.3_src`
* If you want to install Qwt to a custom location, edit `C:\epicsQt\qwt-6.1.3_src\qwtconfig.pri` and change the value of `QWT_INSTALL_PREFIX`
* Edit `buildEpicsBase_MSVC2013x64.bat` as shown below, and save as `buildQwt_Qt5.9.9_MSVC2013x64.bat`:
[source,Batchfile]
----
include::buildQwt_Qt5.9.9_MSVC2013x64.bat[]
----
* Build:
----
C:\epicsQt\qwt-6.1.3_src>qmake qwt.pro
Info: creating stash file C:\epicsQt\qwt-6.1.3_src\.qmake.stash

C:\epicsQt\qwt-6.1.3_src>jom -j 4
----
* Install
----
C:\epicsQt\qwt-6.1.3_src>jom -j 4 install
----

== pass:[<span style='color:#006666'>caQtDM</span>]
* Obtain the most recent release from the https://github.com/caqtdm/caqtdm/releases[github repository]
* Extract the archive to `C:\epicsQt\caqtdm-4.2.4`
* Create a batch file called `buildcaQtDM_Qt5.9.9_MSVC2013.bat` with the following contents:
[source,Batchfile]
----
include::buildcaQtDM_Qt5.9.9_MSVC2013.bat[]
----
* We will build the manual way, each project at a time, so we can monitor how the build progresses:
[source,Batchfile]
----
C:\epicsQt\caqtdm-4.2.4>cd caQtDM_QtControls

C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls>qmake caQtDM_QtControls.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls>jom -j 4

C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls>cd ..\caQtDM_Lib

C:\epicsQt\caqtdm-4.2.4\caQtDM_Lib>qmake caQtDM_Lib.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_Lib>jom -j 4

C:\epicsQt\caqtdm-4.2.4\caQtDM_Lib>cd ..\caQtDM_QtControls\plugins

C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>qmake qtcontrols_controllers.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>jom -j 4
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>qmake qtcontrols_graphics.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>jom -j 4
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>qmake qtcontrols_monitors.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>jom -j 4
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>qmake qtcontrols_utilities.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>jom -j 4

C:\epicsQt\caqtdm-4.2.4\caQtDM_QtControls\plugins>cd ..\..\caQtDM_Lib\caQtDM_Plugins

C:\epicsQt\caqtdm-4.2.4\caQtDM_Lib\caQtDM_Plugins>qmake csplugins.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_Lib\caQtDM_Plugins>jom -j 4

C:\epicsQt\caqtdm-4.2.4\caQtDM_Lib\caQtDM_Plugins>cd ..\..\caQtDM_Viewer

C:\epicsQt\caqtdm-4.2.4\caQtDM_Viewer>qmake caQtDM_Viewer.pro
C:\epicsQt\caqtdm-4.2.4\caQtDM_Viewer>jom -j 4
----
* Edit `C:\epicsQt\caqtdm-4.2.4\caQtDM_Tests\softioc.bat` to reflect the current environment:
[source,shell]
----
@echo on
set PATH=C:\epics\base\bin\windows-x64;%PATH%
cd C:\epicsQt\caqtdm-4.2.4\caQtDM_Tests
softioc.exe -D C:\epics\base\dbd\softioc.dbd st.cmd
cd ..\..
pause
----
* Edit `C:\epicsQt\caqtdm-4.2.4\caQtDM_Tests\mySimulation.db` and comment out the `ACM:PICTURE` record (about line 1094):
[source,c++]
----
#record(waveform, "ACM:PICTURE"){
#	field(DTYP, "fileread")
#	field(INP, "@bayerpicture.dat")
#        field(DESC, "16bit image waveform")
#        field(FTVL, "SHORT")
#        field(NELM, "16000000")
#        field(SCAN,"1 second")
#}
----
* Create a batch file called `runcaQtDM_Qt5.9.9_MSVC2013.bat` to run both caQtDM and the test IOC:
[source,Batchfile]
----
include::runcaQtDM_Qt5.9.9_MSVC2013.bat[]
----
* One command window will load the IOC:
image:caQtDMtestIOC_Qt5.9.9_MSVC2013x64.png[]
* caQtDM display manager will open:
image:caQtDMStatus_Qt5.9.9_MSVC2013x64.png[]
* Followed by `tests.ui`:
image:caQtDMTestGraphics_Qt5.9.9_MSVC2013x64.png[]

== pass:[<span style='color:#006666'>QE Framework</span>]
* Get the latest version from the https://github.com/qtepics/qeframework[github repository]:
[source,Batchfile]
----
c:\epicsQt>git clone https://github.com/qtepics/qeframework.git
Cloning into 'qeframework'...
remote: Enumerating objects: 25, done.
remote: Counting objects: 100% (25/25), done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 3901 (delta 8), reused 16 (delta 7), pack-reused 3876
Receiving objects: 100% (3901/3901), 60.23 MiB | 1.73 MiB/s, done.
Resolving deltas: 100% (2542/2542), done.
Updating files: 100% (822/822), done.
----
* Edit `buildEpicsQt_MSVC2013x64.bat` and add the entries required by qeFramework and qeGui:
[source,Batchfile]
----
include::buildEpicsQt_Qt5.9.9_MSVC2013x64.bat[]
----
* Build:
[source,Batchfile]
----
C:\epicsQt\qeframework\qeframeworkSup\project>qmake framework.pro
Info: creating stash file C:\epicsQt\qeframework\qeframeworkSup\project\.qmake.stash

C:\epicsQt\qeframework\qeframeworkSup\project>jom -j 4 -f Makefile.windows-x64
----
* Install:
[source,Batchfile]
----
C:\epicsQt\qeframework\qeframeworkSup\project>jom -j 4 -f Makefile.windows-x64 install
----
* Navigate to the plugin directory and build the plugin:
[source,Batchfile]
----
C:\epicsQt\qeframework\qeframeworkSup\project>cd ..\..\qepluginApp\project

C:\epicsQt\qeframework\qepluginApp\project>qmake qeplugin.pro
Info: creating stash file C:\epicsQt\qeframework\qepluginApp\project\.qmake.stash

C:\epicsQt\qeframework\qepluginApp\project>jom -j 4 -f Makefile.windows-x64
----
* Install the plugin:
[source,Batchfile]
----
C:\epicsQt\qeframework\qepluginApp\project>jom -j 4 -f Makefile.windows-x64 install
----

== pass:[<span style='color:#006666'>QEGui</span>]
* Still in the same environment, navigate to the epicsQt directory, and get the latest version from the https://github.com/qtepics[github repository]:
[source,Batchfile]
----
C:\epicsQt\qeframework\qepluginApp\project>cd ..\..\..

C:\epicsQt>git clone https://github.com/qtepics/qegui.git
Cloning into 'qegui'...
remote: Enumerating objects: 105, done.
remote: Counting objects: 100% (105/105), done.
remote: Compressing objects: 100% (71/71), done.
remote: Total 538 (delta 51), reused 80 (delta 34), pack-reused 433
Receiving objects: 100% (538/538), 634.29 KiB | 724.00 KiB/s, done.
Resolving deltas: 100% (298/298), done.
----
* Until the bug is fixed, you will have to edit `C:\epicsQt\qegui\qeguiApp\project\QEGuiApp.pro` and change the line `win32:LIBS += -LC:/qwt-6.1.0/lib` to `win32:LIBS += -LC:/qwt-6.1.3/lib`
* Build:
----
C:\epicsQt>cd qegui\qeguiApp\project

C:\epicsQt\qegui\qeguiApp\project>qmake QEGuiApp.pro

C:\epicsQt\qegui\qeguiApp\project>jom -j 4 -f Makefile.windows-x64
----
* Install:
----
C:\epicsQt\qegui\qeguiApp\project>jom -j 4 -f Makefile.windows-x64 install
----

== pass:[<span style='color:#006666'>Running QEGui</span>]
* The most convenient way to launch qegui is via a batch file called that sets the required environment variables:
[source,Batchfile]
----
include::runQEGui_Qt5.9.9_MSVC2013.bat[]
----
* Run the batch file and you should get the following window:

image:qeguiWindow.png[]

image:qeguiAbout_Qt5.9.9_MSVC2013x64.png[]

=== pass:[<span style='color:#006666'>Checking caQtDM integration</span>]
* Create a batch file called `qeguiCheckcaQtDM_Qt5.9.9_MSVC2013.bat`:
[source,Batchfile]
----
include::qeguiCheckcaQtDM_Qt5.9.9_MSVC2013.bat[]
----
* Run the caQtDM test IOC, then launch qegui via the batch file:
image:qeGui_caQtDMTestGraphics_Qt5.9.9_MSVC2013x64.png[]


== pass:[<span style='color:#006666'>Running Qt Designer</span>]

* Similarly, the most convenient way to launch Qt Designer with the Epics Qt plugins loaded is by a batch file:
[source,Batchfile]
----
include::runQtDesigner_Qt5.5.9_MSVC2013.bat[]
----
* Run the batch file and you should get the following window:

image:qtDesigner_Qt5.9.9_MSVC2013x64.png[]

image:qtDesignerAboutPlugins_Qt5.9.9_MSVC2013x64.png[]
